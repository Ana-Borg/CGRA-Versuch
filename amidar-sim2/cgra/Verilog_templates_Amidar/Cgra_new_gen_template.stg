toplevel(date,maxContextWidth,cacheIO,ccntwidth,contextmemorysize,contextWidthCBox,portlist, peAddrWidth,statusIns,statusWireDeclaration,resultConnection,pes,nrOfPes,jointCacheValid,contextAddrWidth,wires_direct_out_Pe,wires_out_Pe,wires_status,viaWidth)
::= <<

/*
Author: Dennis L. Wolf
Date: §date§
Version: 3.0 - generator target dependent
Version History: 	2.1 converters for contexts, Fsm reduction and cleanup
			2.0 changed to String Templates
			1.1 changed to header and `define
			1.0 construct
*/
`include "definitions.vh" // still needed with full custom generation using ST?
`include "AMIDAR_definitions.vh"

`default_nettype wire

module Cgra_Amidar (
§portlist§);


reg  [`STATE_WIDTH-1:0] state,next_state;
reg  			w_save_token;
reg  [§ccntwidth§-1:0] 	r_counter_load_context;
wire [§ccntwidth§-1:0] 	w_ccnt;

wire RST_N_I;
assign RST_N_I = !RST_I;

// FSM - STATE TRANSITIONS 

always@(*) begin
case (state) // open switch - big
 // IDLE STATE
  `IDLE : begin
    if(TOKEN_VALID_I == 1'b1) begin
	case(OPCODE_I) 
	`OP_RECEIVELOCALVAR:  
		begin
	      	 if(OPERAND_DATA_VALID_I==1'b1 && OPERAND_ADDR_VALID_I ==1'b1)
	       	  next_state = `PREPARING_CONTEXT_RECEIVE;
               	 else
	          next_state = `IDLE;
	     	  w_save_token = 1'b0;
	     	 end

	`OP_SENDLOCALVAR:
		begin 
	  	 if(OPERAND_ADDR_VALID_I ==1'b1) begin
	      	  next_state = `PREPARING_CONTEXT_SEND;
		 end
	 	 else begin
	  	  next_state = `IDLE;
		 end
	  	  w_save_token = 1'b1;
		end
		     
	`OP_LOADPROGRAM: 
		begin
        	 if(OPERAND_DATA_VALID_I==1'b1 && OPERAND_DATA2_VALID_I==1'b1 && OPERAND_ADDR_VALID_I ==1'b1)
        	  next_state = `LOAD_PROGRAM;
               	 else
         	  next_state = `IDLE;
        	  w_save_token = 1'b0;
		end
   
	`OP_RUN: 	    
		begin 
	     	 if(OPERAND_ADDR_VALID_I==1'b1)
	      	  next_state = `SETADDRESS;
              	 else
	       	  next_state = `IDLE;
	     	  w_save_token = 1'b0;
	    	end

        
	default: 
		begin
		  next_state = `IDLE;
		  w_save_token = 1'b0;
		end
     endcase    
    end 
    else begin
     next_state = `IDLE;
     w_save_token = 1'b0;
     end
   end
         
   `LOAD_PROGRAM: 
		begin
		// if(r_counter_load_context == §contextmemorysize§-1) begin
		   next_state = `LOAD_PROGRAM_FINISHED;
		 // end
		// else begin
		//   next_state = `LOAD_PROGRAM;
		//  end
		 w_save_token = 1'b0;
	     	end
   
   `LOAD_PROGRAM_FINISHED:    
		begin 
		 next_state = `IDLE;
		 w_save_token = 1'b0;
		end 



 // Preparing a write to the Context in order to send
   `PREPARING_CONTEXT_RECEIVE: 
		begin 
		 next_state = `WRITING_CONTEXT_RECEIVE;
		 w_save_token = 1'b0;
		end // close write context state



 // Writing the Context in order to receive
   `WRITING_CONTEXT_RECEIVE : 
		begin
		 next_state = `WRITE_LOCAL_VAR;
		  w_save_token = 1'b0;
		end 

// WRITE local variable to the regfile
   `WRITE_LOCAL_VAR : 
		begin
        	 next_state = `IDLE;
	         w_save_token = 1'b0;
		end

 // SETADDRESS STATE
   `SETADDRESS : 
		begin
     		 next_state = `RUN;     
     		 w_save_token = 1'b0;
   		end 

 // RUN STATE
   `RUN : 
		begin
     		 if(w_ccnt == §contextmemorysize§-1) begin
	           next_state = `IDLE;
		  end
     		 else begin
		  next_state = `RUN;
		end
		 w_save_token = 1'b0;
		end

 // Preparing a write to the Context in order to send
   `PREPARING_CONTEXT_SEND : 
		begin
     		 next_state = `WRITING_CONTEXT_SEND;
     		 w_save_token = 1'b0;
		end

 // Writing the Context in order to send
   `WRITING_CONTEXT_SEND :
		begin
//		if(RESULT_ACK_I) begin
     		 next_state = `SEND_LOCAL_VAR;
//		end
//		else begin
//		next_state = `WRITING_CONTEXT_SEND;
//		end
     		 w_save_token = 1'b0;
		end

 // SENDING a local variable
  `SEND_LOCAL_VAR : 
		begin
          	 if(RESULT_ACK_I) begin
	   	   next_state = `IDLE;
		  end
	 	 else begin
		   next_state = `SEND_LOCAL_VAR;
		  end
     		 w_save_token = 1'b0;
		end

// DEFAULT
   default : 
		begin
     		 next_state = `IDLE;
     		 w_save_token = 1'b0;
   		end 

  endcase 
end // ends FSM Transitions

reg [`AMIDAR_TAG_WIDTH-1:0]	tag_buffer;
reg [`AMIDAR_FU_ID_WIDTH-1:0]	DESTINATION_FU_buffer;
reg [`AMIDAR_PORT_ID_WIDTH-1:0]	des_port_buffer;

assign DESTINATION_TAG_O = tag_buffer;
assign DESTINATION_FU_O = DESTINATION_FU_buffer;
assign DESTINATION_PORT_O = des_port_buffer;


always@(posedge CLK_I) begin
// RST
   if(!RST_N_I) begin
     state <= `IDLE;
     tag_buffer <= 0;
     DESTINATION_FU_buffer <= 0;
     des_port_buffer <= 0;
     r_counter_load_context <= 0;
   end

// DISABLE
  else if(~EN_I) begin
     state <= state;
     tag_buffer <=  tag_buffer;
     DESTINATION_FU_buffer <=  DESTINATION_FU_buffer;
     des_port_buffer <= des_port_buffer;
     r_counter_load_context <= r_counter_load_context;
   end

// ENABLE
  else begin
    state<=next_state;
    
	// loading or increasing counter
    if(state == `IDLE && next_state == `LOAD_PROGRAM) begin
      r_counter_load_context <= OPERAND_ADDR_I[31:§nrOfPes§+2];
     end
    else begin
      r_counter_load_context <= r_counter_load_context;
     end

	// 
    if(w_save_token) begin
     tag_buffer <= DESTINATION_TAG_I;
     DESTINATION_FU_buffer <= DESTINATION_FU_I;
     des_port_buffer <= DESTINATION_PORT_I;
    end
     else begin
      tag_buffer <=  tag_buffer;
      DESTINATION_FU_buffer <=  DESTINATION_FU_buffer;
      des_port_buffer <= des_port_buffer;
     end
   end
end


// CONTROL SIGNALS - OUTPUT OF FSM


reg w_operand_acknowledge, w_valid_result;
assign RESULT_VALID_O = w_valid_result;
assign OPERAND_ACK_O = w_operand_acknowledge;

reg w_load_enable_controlunit;
reg w_enable_datapath_modules;
reg w_enable_context_memories;
reg w_enable_controlunit;
reg w_write_context;
reg w_clean_context_127;
wire joint_cache_valids;
reg w_en_contexts;
reg r_context_wr_addr_is_counter;
reg w_is_send_context;

and(joint_cache_valids §jointCacheValid§);

always@(*) begin
w_is_send_context = 1'b0;
w_clean_context_127 = 1'b0;
w_operand_acknowledge = 1'b0;
w_enable_datapath_modules = 1'b0;
w_enable_controlunit = 1'b0; // this might lead to problems
w_valid_result =1'b0;
w_load_enable_controlunit = 1'b0;
w_write_context = 1'b0;
r_context_wr_addr_is_counter = 1'b0;
CONTEXT_ACK_O= 1'b0;
w_enable_context_memories = 1'b0;

 case(state) 
       		
  `LOAD_PROGRAM: 
		begin
        	 w_write_context = 1'b1;
	         r_context_wr_addr_is_counter = 1'b1;
		 CONTEXT_ACK_O= 1'b1;
		 w_enable_context_memories = EN_I;
              	end
              
  `LOAD_PROGRAM_FINISHED: 
		begin
          	 w_operand_acknowledge = 1'b1;
          	 r_context_wr_addr_is_counter = 1'b1;
		 CONTEXT_ACK_O= 1'b1;
		 w_enable_context_memories = EN_I;
             	end          

  `PREPARING_CONTEXT_RECEIVE: 
		begin
		 w_enable_context_memories = EN_I;
		 w_write_context = 1'b1;
       		end

  `WRITING_CONTEXT_RECEIVE: 
		begin
//		 w_enable_datapath_modules = 1'b1;
		 w_enable_context_memories = EN_I;
        	end

  `WRITE_LOCAL_VAR: 
		begin
         w_operand_acknowledge = 1'b1;
         w_enable_datapath_modules = 1'b1;
		 w_clean_context_127 = 1'b1;
		 w_write_context = 1'b1;
		 w_enable_context_memories = EN_I;
                end

  `SETADDRESS: 	
		begin
		 w_operand_acknowledge = 1'b1;
		 w_load_enable_controlunit = 1'b1;
//		 w_write_context = 1'b1;
	   w_enable_controlunit = EN_I;
		 w_clean_context_127 = 1'b1;
		 w_enable_context_memories = EN_I;
        	end

  `RUN: 	
		begin
		 w_enable_datapath_modules = EN_I & joint_cache_valids;
		 w_enable_controlunit = EN_I & joint_cache_valids;
		 w_enable_context_memories = EN_I & joint_cache_valids;
           	end

  `PREPARING_CONTEXT_SEND: 
		begin
		 w_write_context = 1'b1;
		 w_is_send_context = 1'b1;
		 w_enable_context_memories = EN_I;
		end

  `WRITING_CONTEXT_SEND: 	
		begin
//		 w_valid_result =1'b1;
//       w_enable_datapath_modules = 1'b1;
		 w_enable_context_memories = EN_I;
//		 w_operand_acknowledge = RESULT_ACK_I;
           	end


  `SEND_LOCAL_VAR: 	
		begin
		 w_operand_acknowledge = RESULT_ACK_I;
		 w_valid_result =1'b1;
         w_enable_datapath_modules = 1'b1;
//		 w_enable_context_memories = EN_I;
//		 w_clean_context_127 = 1'b1;
           	end
  endcase

end

wire w_write_en_cbox = w_write_context & (!w_clean_context_127) & OPERAND_ADDR_I[§nrOfPes§]  & !w_is_send_context;    
wire w_write_en_ccu  = w_write_context & (!w_clean_context_127) & OPERAND_ADDR_I[§nrOfPes§+1]& !w_is_send_context;   
wire w_branch_selection, w_predication;


ContextControlUnit  #(§ccntwidth§,§contextmemorysize§) 
	controlunit(
	.CLK_I(CLK_I),
	.RST_N_I(RST_N_I),
	.EN_I(w_enable_controlunit),
	.CBOX_I(w_branch_selection),
	.CONTEXT_DATA_I(CONTEXT_DATA_I[§ccntwidth§+2:0]),
	.CONTEXT_WR_ADDR_I(r_counter_load_context),
	.CONTEXT_WR_EN_I(w_write_en_ccu),
	.ADDR_I(OPERAND_ADDR_I[§ccntwidth§-1:0]),
	.LOAD_EN_I(w_load_enable_controlunit),
	.CCNT_O(w_ccnt)
	);

   §wires_status§ 
  
CBox magical(
	.CLK_I(CLK_I),
	.RST_N_I(RST_N_I),
	.EN_I(w_enable_datapath_modules),
	.CCNT_I(w_ccnt), §statusIns§
	.CONTEXT_DATA_I(CONTEXT_DATA_I[§contextWidthCBox§-1:0]),
	.CONTEXT_WR_ADDR_I(r_counter_load_context),
	.CONTEXT_WR_EN_I(w_write_en_cbox),
	.PREDICATION_O( w_predication),
	.BRANCH_SELECTION_O(w_branch_selection)            
        );

     §wires_direct_out_Pe§
     §wires_out_Pe§

     §pes§

reg [§peAddrWidth§-1:0] stabalizer;

always@(posedge CLK_I)begin
stabalizer <= OPERAND_ADDR_I[§peAddrWidth§-1:0];
end

// Liveout connections
always@(*)begin
 case(stabalizer[§viaWidth§-1:0])  §resultConnection§
 default: RESULT_O = 0;
 endcase
 end

endmodule
  

>>

cacheIO(index)
::= <<
(* dont_touch = "true" *) input wire [`DATA_WIDTH_CACHE-1:0]	CACHE_DATA_§index§_I,
(* dont_touch = "true" *) input wire 						CACHE_VALID_§index§_I, 
(* dont_touch = "true" *) output wire [`CACHE_ADDR_WIDTH-1:0]	CACHE_ADDR_§index§_O,
(* dont_touch = "true" *) output wire [`CACHE_ADDR_WIDTH-1:0]	CACHE_OFFSET_§index§_O,
(* dont_touch = "true" *) output wire [`DATA_WIDTH_CACHE-1:0]	CACHE_DATA_§index§_O,
(* dont_touch = "true" *) output wire	  					CACHE_WR_§index§_O,
(* dont_touch = "true" *) output wire                          	CACHE_VALID_§index§_O,
>>


peModule(ID,outputwidth,controlflow, memoryAccess,inputs,contextwidth,multicycle,liveout,ccntwidth)
::= <<

wire w_write_en_context_§ID§;
wire [§contextwidth§-1:0] w_context_data_in_§ID§;
wire [§ccntwidth§-1:0] w_context_wr_addr_§ID§;

PE_§ID§ pe_§ID§( 
   .CLK_I(CLK_I),§if(multicycle)§
   .RST_N_I(RST_N_I), §endif§
   .EN_I(w_enable_datapath_modules),
   .CCNT_I(w_ccnt), §inputs§
   .CONTEXT_EN_I(w_enable_context_memories),
   .CONTEXT_DATA_I(w_context_data_in_§ID§),
   .CONTEXT_WR_EN_I(w_write_en_context_§ID§),
   .CONTEXT_WR_ADDR_I(w_context_wr_addr_§ID§),§if(memoryAccess)§
   .CACHE_DATA_I(CACHE_DATA_§ID§_I),
   .CACHE_ADDR_O(CACHE_ADDR_§ID§_O), 
   .CACHE_WR_O(CACHE_WR_§ID§_O),
   .CACHE_VALID_O(CACHE_VALID_§ID§_O),
   .CACHE_OFFSET_O(CACHE_OFFSET_§ID§_O),
    §endif§
   .AMIDAR_I(OPERAND_DATA_I),
   .PREDICATION_I(w_predication),
   .DIRECT_O(w_direct_out_§ID§)§if(liveout || memoryAccess)§,
   .DATA_O(w_pe_out_§ID§)§endif§ §if(controlflow)§,
   .ALU_STATUS_O(w_status_§ID§)§endif§);

   §if(memoryAccess)§
   assign CACHE_DATA_§ID§_O = w_pe_out_§ID§;
   §endif§


Context_Converter_§ID§ converter_§ID§(
  .OPERAND_ADDR_I(OPERAND_ADDR_I),
  .CONTEXT_DATA_I(CONTEXT_DATA_I[§contextwidth§-1:0]),
  .CLEAN_HIGHEST_SLOT_I(w_clean_context_127),
  .WR_ADDR_IS_COUNTER(r_context_wr_addr_is_counter), 
  .WRITE_CONTEXT_FSM_I(w_write_context),
  .IS_SEND_CONTEXT_I(w_is_send_context),
  .CCNT_I(w_ccnt),
  .COUNTER_I(r_counter_load_context),
  .WRITE_ADDR_O(w_context_wr_addr_§ID§),
  .CONVERTED_WRITE_EN_O(w_write_en_context_§ID§),
  .CONVERTED_CONTEXT_DATA_O(w_context_data_in_§ID§)
);
>>

