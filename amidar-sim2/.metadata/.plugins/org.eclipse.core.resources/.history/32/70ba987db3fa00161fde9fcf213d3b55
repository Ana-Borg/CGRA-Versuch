package gps.acquisition;
import java.lang.Math;


public class Acquisition {
	
	int mengeFrequenzen = calculateMengeFrequenzen();
	float pi = (float) 3.14159;

	int N = 400;
	int nSample = 0;
	float[][] realSample = new float[N][mengeFrequenzen];
	float[][] imagSample = new float[N][mengeFrequenzen];
	
	int nCode = 0;	
	float[] realCode = new float[N];
	float[] imagCode = new float[N];
	
	int Dopplerverschiebung;
	int Codeverschiebung;
	
	int sampleFrequenz = 400000;		//fs
	int stepFrequenz = 1000;			//fstep
	int maxFrequenz = 5000;				//fmax
	int minFrequenz = -5000; 			//fmin
	float grenzwert = (float) 0.015;	//gama
	
	public boolean enterSample(float real, float imag){
		
		//store samples in first column
		realSample[nSample][0] = real;
		imagSample[nSample][0] = imag;
		nSample++;
		
		if(nSample < N - 1) return false;
		else return true;
	}
	
	public boolean enterCode(float real, float imag){
	
		realCode[nCode] = real;
		imagCode[nCode] = imag;
		nCode++;
		
		if(nCode < N - 1) return false;
		else return true;
	}
	
	public int getDopplerverschiebung(){
		return Dopplerverschiebung;
	}
	
	public int getCodeVerschiebung(){
		return Codeverschiebung;
	}
	
	// Acquisition function and its auxiliary functions
	public boolean startAcquisition(){
	
		float Pin = calculateInputSignalEstimation(); // must be done before the calculations of euler factors
		
		
		return false;
	}
	
	private int calculateMengeFrequenzen(){
		int m = 0, fd;
		for(fd = minFrequenz; fd <= maxFrequenz; fd += stepFrequenz){
			m++;
		}
		return m;
	}
	
	private float calculateInputSignalEstimation(){
		int n = 0;
		float Pin = 0;
		
		for(n = 0; n < N; n++){
			Pin += realSample[n][0]*realSample[n][0] + imagSample[n][0]*imagSample[n][0];
		}
		Pin = Pin/N;
		return Pin;
	}
	
	private void calculateXfd(){
		
		float realEuler, imagEuler;
		int n, fd = 0;
		int m = mengeFrequenzen;
		
		for(fd = maxFrequenz; fd >= minFrequenz; fd -= stepFrequenz){
			for(n = 0; n < N; n++){
				realEuler = calculateRealEulerFactors(fd, n);
				imagEuler = calculateImagEulerFactors(fd, n);
				
				realSample[n][m] = realSample[n][0]*realEuler - imagSample[n][0]*imagEuler;
				imagSample[n][m] = imagSample[n][0]*realEuler - realSample[n][0]*imagEuler;
			}
			m--;
		}
	}
	
	private float calculateRealEulerFactors(int fd, int nSample){
		
		double arg = (fd*nSample*2*pi)/sampleFrequenz;
		float realEuler = (float) Math.cos(arg);
		
		return realEuler;
	}
	
	private float calculateImagEulerFactors(int fd, int nSample){
		
		double arg = (fd*nSample*2*pi)/sampleFrequenz;
		float imagEuler = (float) Math.sin(arg);
		
		return imagEuler;
	}

}
